.TH RC 1 "2010 Jul 17"
.SH NAME
rcpy \- Raccoon Calulator in Python / RPN calculator in python


.SH SYNOPSIS
.br
.B rcpy
.br
.B echo 10 20 + p | rcpy
.br


.SH DESCRIPTION
.B RCPY
is a simple reverse-polish notation calculator written in python.
Its purpose was to add thing I felt were missing in dc(1) that I need
in my daily usage of a calculator.
.P
It supports decimal, hexadecimal, binary as well as binary operation
on these values.


.SH STACK HANDLING
.TP 9
pop:
print and remove the value from stack
.TP
dump:
dump the current stack content
.TP
d:
duplicate the top value of the stack
.TP
print:
print the value on top of stack
.TP
p:
same as `print`
.TP
swap:
swap the last 2 values on top of stack
.TP
r:
same as `swap`
.TP
clear:
empty the stack
.TP
c:
same as clear
.P
Current mode is shown in the prompt, the used mode won't neither the
values already in stack nor the inputed values. If you add 0x42 to 
your stack while being in bin mode, the stack will still contains 0x42
but if you do an operation, the output will be in the chosen mode.
.TP 9
hex:
switch output of operations to hexadecimal
.TP
bin:
switch output of operations to binary
.TP
dec:
switch output of operations to decimal
.TP
conv:
convert value on top of the stack to the selected mode, this command won't work
on floating values
.TP
int:
convert a floating value to an integer


.SH GENERIC COMMANDS
.TP 9
quit:
quit RC
.TP
q:
same as `quit`

.SH OPERATIONS
.TP 9
+
Addition
.TP
-
Substraction
.TP
*
Multiplication
.TP
x
Multiplication
.TP
/
Division
.TP
%
Modulo
.TP
^
Power
.TP
v
Square root


.P
All operation pop the two top values, and replace them by the result
of the operation in the stack.

.SH BINARY OPERATIONS
.TP 9
&
Logical and
.TP
|
Logical or
.TP
xor
Logical xor (^ being used for power)
.TP
<<
Shift to left
.TP
>>
Shift to right

.P
All binary operation pop the two top values, and replace them by the
result of the operation in the stack.


.SH EXAMPLE
.P
Sample session of RC:
.P
[dec] rcpy> 10 20 30   
.br
[dec] rcpy> dump
.br
10
.br
20
.br
30
.br
[dec] rcpy> + d
.br
10
.br
50
.br
[dec] rcpy> hex
.br
[hex] rcpy> + p
.br
0x3c
.br
[hex] rcpy> bin
.br
[bin] rcpy> conv
.br
0x3c -> 0b111100
.br
[bin] rcpy> dec
.br
[dec] rcpy> 7 / p
.br
8
.br
[dec] rcpy> 22 / p
.br
0.363636363636
.br
[dec] rcpy> 10.7 + p
.br
11.0636363636
.br
[dec] rcpy> 1 4 << 1 8 << | p
.br
272
.br
[dec] rcpy> hex
.br
[hex] rcpy> conv
.br
272 -> 0x110
.br

.SH BUGS
	Email bug reports to bleader@ratonland.org


				2010-07-17				RC(1)
