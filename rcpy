#!/usr/bin/env python3

import sys
import os
import math
import readline
from colorama import Fore

errstr = Fore.RED + "error" + Fore.RESET + ":"
warnstr = Fore.MAGENTA + "warning" + Fore.RESET + ":"

class Entry:
    def __init__(self, val, base):
        self.val = val
        self.base = base

    def __str__(self):
        if self.base == 10:
            return str(self.val)
        elif self.base == 16:
            return hex(self.val)
        elif self.base == 2:
            return bin(self.val)

class Command:
    def __init__(self, func, minlen, poplen):
        self.func = func    # function to call
        self.len = minlen   # minimum len of stack
        self.pop = poplen   # number of elements to pop and pass to function

class rc_stack:

    def __init__(self):

        self.cmds = {}
        self.stack = []
        self.macros = {}
        self.base = ("dec", 10)
        self.tty = True

        # stack manipulation
        # cmd in dict           ctor    function        len pop
        #####################   #$##### ##########      ### ###
        self.cmds['pop'] =      Command(self.pop,       1,  1)
        self.cmds['dump'] =     Command(self.dump,      0,  0)
        self.cmds['d'] =        Command(self.duplicate, 1,  0)
        self.cmds['p'] =        Command(self.print_last,0,  0)
        self.cmds['print'] =    Command(self.print_last,0,  0)
        self.cmds['r'] =        Command(self.swap,      2,  2)
        self.cmds['swap'] =     Command(self.swap,      2,  2)
        self.cmds['c'] =        Command(self.clear,     0,  0)
        self.cmds['clear'] =    Command(self.clear,     0,  0)
        self.cmds['conv'] =     Command(self.conv,      0,  0)
        self.cmds['int'] =      Command(self.integer,   1,  0)

        # change output base
        #####################   #$##### ##########      ### ###
        self.cmds['hex'] =      Command(self.base_hex,  0,  0)
        self.cmds['bin'] =      Command(self.base_bin,  0,  0)
        self.cmds['dec'] =      Command(self.base_dec,  0,  0)

        # control
        #####################   #$##### ##########      ### ###
        self.cmds['quit'] =     Command(self.quit,      0,  0)
        self.cmds['q'] =        Command(self.quit,      0,  0)
        self.cmds['help'] =     Command(self.help,      0,  0)
        self.cmds['h'] =        Command(self.help,      0,  0)

        # operations
        #####################   #$##### ##########      ### ###
        self.cmds['+'] =        Command(self.add,       2,  2)
        self.cmds['-'] =        Command(self.sub,       2,  2)
        self.cmds['/'] =        Command(self.div,       2,  2)
        self.cmds['*'] =        Command(self.mul,       2,  2)
        self.cmds['x'] =        Command(self.mul,       2,  2)
        self.cmds['%'] =        Command(self.mod,       2,  2)
        self.cmds['^'] =        Command(self.pow,       2,  2)
        self.cmds['v'] =        Command(self.sqr,       1,  1)

        # binary operations
        #####################   #$##### ##########      ### ###
        self.cmds['&'] =        Command(self.bin_and,   2,  2)
        self.cmds['xor'] =      Command(self.bin_xor,   2,  2)
        self.cmds['|'] =        Command(self.bin_or,    2,  2)
        self.cmds['<<'] =       Command(self.lsh,       2,  2)
        self.cmds['>>'] =       Command(self.rsh,       2,  2)

        # conversions
        #####################   #$##### ##########      ### ###
        self.cmds['cm2in'] =    Command(self.cm2in,     1,  0)
        self.cmds['in2cm'] =    Command(self.in2cm,     1,  0)
        self.cmds['cm2ft'] =    Command(self.cm2ft,     1,  0)
        self.cmds['ft2cm'] =    Command(self.ft2cm,     1,  0)
        self.cmds['km2mi'] =    Command(self.km2mi,     1,  0)
        self.cmds['mi2km'] =    Command(self.mi2km,     1,  0)
        self.cmds['m2y'] =      Command(self.m2y,       1,  0)
        self.cmds['y2m'] =      Command(self.y2m,       1,  0)
        self.cmds['kg2lbs'] =   Command(self.kg2lbs,    1,  0)
        self.cmds['lbs2kg'] =   Command(self.lbs2kg,    1,  0)
        self.cmds['c2f'] =      Command(self.c2f,       1,  0)
        self.cmds['f2c'] =      Command(self.f2c,       1,  0)

# private helpers
    def __conv_print(self, before, after):
        if self.tty:
            print(str(before) + " -> " + str(after))
        else:
            print(after)

    def __conv_with_coef(self, coef):
        old = str(self.stack[-1])
        self.stack[-1].val *= coef
        self.__conv_print(old, self.stack[-1])


# public helpers
    def set_tty(self, v):
        self.tty = v

    def process(self, v):
        if self.cmds.__contains__(v):
            if len(self.stack) < self.cmds[v].len:
                print("%s Not enough element in stack: %d needed, %d in stack\n" %
                        (errstr, self.cmds[v].len, len(self.stack)))
                return 1

            params = []
            for i in range(0, self.cmds[v].pop):
                params.append(self.stack.pop())
            self.cmds[v].func(params)
            return 0
        return -1


    def push(self, v):
        dec = None

        if v.startswith(('0x', '0X')):
            try:
                dec = int(v, 16)
                base = 16
                self.stack.append(Entry(dec, base))
                return 0
            except ValueError:
                pass
        elif v.startswith(('0b', '0B')):
            try:
                dec = int(v, 2)
                base = 2
                self.stack.append(Entry(dec, base))
                return 0
            except ValueError:
                pass
        else:
            try:
                dec = int(v, 10)
                base = 10
                self.stack.append(Entry(dec, base))
                return 0
            except ValueError:
                pass
            try:
                dec = float(v)
                base = 10
                self.stack.append(Entry(dec,base))
                return 0
            except ValueError:
                pass
        return -1

    def get_base(self):
        return self.base[0]

    def set_macro(self, v):
        self.macros[v[0]] = v[1:]

    def get_macro(self, v):
        if v in self.macros:
            return self.macros[v]
        return []


# app commands
    def quit(self, _):
        print("\n%s--%s Bye %s--%s" %
                (Fore.MAGENTA, Fore.RESET, Fore.MAGENTA, Fore.RESET))
        sys.exit()

    def help(self, _):
        if os.path.isfile("./rcpy.1"):
            os.system("man ./rcpy.1")
        else:
            os.system("man rcpy")

# stack handling
    def pop(self, entries):
        print("pop: " + str(entries[0].val))

    def dump(self, _):
        for idx, entry in enumerate(self.stack):
            print("%s%d%s:" % (Fore.GREEN, idx, Fore.RESET), entry)

    def duplicate(self, _):
        self.stack.append(self.stack[-1])

    def print_last(self, _):
        print(self.stack[-1])

    def swap(self, entries):
        self.stack.append(entries[1])
        self.stack.append(entries[0])

    def clear(self, _):
        self.stack.clear()

# base handling
    def conv(self, _):
        a = self.stack[-1]
        old = str(a)
        if type(a.val) == float:
            print("%s No conversion support for float" % errstr)
            return
        a.base = self.base[1]
        self.__conv_print(old, str(self.stack[-1]))

    def base_hex(self, _):
        self.base = ("hex", 16)

    def base_bin(self, _):
        self.base = ("bin", 2)

    def base_dec(self, _):
        self.base = ("dec", 10)

# actual operators
    def add(self, entries):
        self.stack.append(Entry(entries[0].val + entries[1].val, self.base[1]))

    def sub(self, entries):
        self.stack.append(Entry(entries[0].val - entries[1].val, self.base[1]))

    def mul(self, entries):
        self.stack.append(Entry(entries[0].val * entries[1].val, self.base[1]))

    def div(self, entries):
        self.stack.append(Entry(entries[1].val / entries[0].val, self.base[1]))

    def mod(self, entries):
        self.stack.append(Entry(entries[1].val % entries[0].val, self.base[1]))

    def pow(self, entries):
        self.stack.append(Entry(entries[1].val ** entries[0].val, self.base[1]))

    def sqr(self, entries):
        self.stack.append(Entry(math.sqrt(entries[0].val), self.base[1]))

    def bin_and(self, entries):
        self.stack.append(Entry(entries[1].val & entries[0].val, self.base[1]))

    def bin_xor(self, entries):
        self.stack.append(Entry(entries[1].val ^ entries[0].val, self.base[1]))

    def bin_or(self, entries):
        self.stack.append(Entry(entries[1].val | entries[0].val, self.base[1]))

    def lsh(self, entries):
        self.stack.append(Entry(entries[1].val << entries[0].val, self.base[1]))

    def rsh(self, entries):
        self.stack.append(Entry(entries[1].val >> entries[0].val, self.base[1]))

# conversions
    def integer(self, _):
        last = self.stack[-1]
        if type(last.val) == float:
            last.val = int(last.val)
        else:
            print("%s not a float" % warnstr)

    def in2cm(self, _):
        self.__conv_with_coef(2.54)

    def cm2in(self, _):
        self.__conv_with_coef(0.393700787)

    def cm2ft(self, _):
        self.__conv_with_coef(0.0328084)

    def ft2cm(self, _):
        self.__conv_with_coef(30.48)

    def km2mi(self, _):
        self.__conv_with_coef(0.621371192)

    def mi2km(self, _):
        self.__conv_with_coef(1.609344)

    def m2y(self, _):
        self.__conv_with_coef(1.0936133)

    def y2m(self, _):
        self.__conv_with_coef(0.9144)

    def kg2lbs(self, _):
        self.__conv_with_coef(2.20462262)

    def lbs2kg(self, _):
        self.__conv_with_coef(0.45359237)

    def c2f(self, _):
        old = str(self.stack[-1])
        self.stack[-1].val = (self.stack[-1].val * 1.8) + 32
        self.__conv_print(old, self.stack[-1])

    def f2c(self, _):
        old = str(self.stack[-1])
        self.stack[-1].val = (self.stack[-1].val - 32) / 1.8
        self.__conv_print(old, self.stack[-1])


def input_processing(input):
    for i in input:
        if s.push(i) == 0:
            continue
        elif s.process(i) >= 0:
            continue
        elif i == 'm':
            idx = input.index(i)
            if len(input[idx+1:]) > 1:
                s.set_macro(input[idx+1:])
                input.clear()
            continue
        elif i == '@':
            idx = input.index(i)
            if len(input[idx+1:]) > 0:
                input_processing(s.get_macro(input[idx+1]))
                input.pop(idx)
            continue
        else:
            print("%s Unknown command %s, ignoring it." % (errstr, i))

s = rc_stack()

# check if we are python2 on 3 to use input or raw_input
# which allow for up/down arrows
if sys.version_info[0] >= 3:
    rc_input = input
else:
    rc_input = raw_input

if len(sys.argv) > 1:
    s.set_tty(False)
    input_processing(sys.argv[1:])
elif not os.isatty((sys.stdin.fileno())):
    s.set_tty(False)
    data = sys.stdin.readlines()
    for i in data:
        input_processing(i.split())
else:
    readline.parse_and_bind('tab: complete')
    readline.parse_and_bind('set editing-mode emacs')
    while 1:
        try:
            data = rc_input("[%s] rcpy> " % (s.get_base()))
        except (EOFError, KeyboardInterrupt) as e:
            s.quit()

        data = data.split()
        input_processing(data)

# vim: ts=4 sw=4 et
